{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","eingabe","setzeEingabe","ausgabe","setzeAusgabe","a","fetch","antwort","json","daten","message","className","InputGroup","FormControl","name","value","onChange","e","target","Append","Button","onClick","Alert","variant","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yTA+DeA,MA1Df,WAAgB,IAAD,EACkBC,IAAMC,SAAS,IADjC,mBACNC,EADM,KACEC,EADF,OAEkBH,IAAMC,UAAS,GAFjC,mBAENG,EAFM,KAEEC,EAFF,iDAIb,8BAAAC,EAAA,sEAEwBC,MAAM,gBAAD,OAAiBL,IAF9C,cAEQM,EAFR,gBAQwBA,EAAQC,OARhC,OAQQC,EARR,OASEL,EAAaK,EAAMC,SATrB,4CAJa,kEAeb,sBAAAL,EAAA,sEACQC,MAAM,gBAAD,OAAiBL,IAD9B,4CAfa,kEAuBb,8BAAAI,EAAA,+EAE0BC,MAAM,QAFhC,cAEUC,EAFV,gBAG0BA,EAAQC,OAHlC,OAGUC,EAHV,OAIIL,EAAaK,EAAMC,SAJvB,kDAMIN,GAAa,GANjB,2DAvBa,kEAoCb,sBAAAC,EAAA,sEACQC,MAAM,QADd,OAEEF,GAAa,GAFf,4CApCa,sBAwCb,OAEE,yBAAKO,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,KAAK,UAAUC,MAAOd,EAASe,SAzClD,SAAgBC,GAAIf,EAAae,EAAEC,OAAOH,UA0CpC,kBAACH,EAAA,EAAWO,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QA9CH,4CA8CL,OACA,kBAACD,EAAA,EAAD,CAAQC,QA/CH,4CA+CL,OACA,kBAACD,EAAA,EAAD,CAAQC,QAhDH,4CAgDL,OACA,kBAACD,EAAA,EAAD,CAAQC,QAjDH,4CAiDL,SAGFlB,EAAU,kBAACmB,EAAA,EAAD,CAAOC,QAAQ,UAAUpB,GAAmB,OC7CxDqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCvFjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDWnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,aAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC1B,MAAMyB,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCpC/BE,K","file":"static/js/main.8417c664.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { InputGroup, Button, Alert, FormControl } from 'react-bootstrap'\n\nfunction App() {\n  const [eingabe,setzeEingabe] = React.useState('');\n  const [ausgabe,setzeAusgabe] = React.useState(false);\n  function change(e){ setzeEingabe(e.target.value); }\n  async function abschicken(){\n    // to get json fetch from the server!!!\n    const antwort = await fetch(`/say?message=${eingabe}`);\n  \n  \n   //von alex const antwort = await fetch(`http://192.168.178.27:3001`);\n   // von maxim const antwort = await fetch(`http://192.168.178.80:3002/`);\n    // meine const antwort = await fetch(`http://192.168.178.28:3001/`);\n    const daten   = await antwort.json()\n    setzeAusgabe(daten.message);\n  }\n  async function setzen(){\n    await fetch(`/set?message=${eingabe}`);\n  } //here's  is an error here(its about JSON)\n  \n  \n  //this is how to load =>\n  //daten ro load kardim vase hamin az false estefade mikonim ke kaar anjam shod\n  //\n  async function laden(){\n    try {\n      const antwort = await fetch(`/get`);\n      const daten   = await antwort.json()\n      setzeAusgabe(daten.message);\n    } catch(e){\n      setzeAusgabe(false);\n    }\n  }\n  //this is erase function!!!\n  // So it's an Asynchronous(async) function; cuz we'll get the datas paraller\n  //baraye inke messagi ke daramo az server va az browser pak konam az false estefade mikonam \n  // dar in halat khate 52 mishe null va pak mishe!!!\n  async function loeschen(){\n    await fetch(`/del`);\n    setzeAusgabe(false);\n  }\n  return (\n    //to do some different functions using buttons!!!\n    <div className=\"App\">\n      <InputGroup>\n        <FormControl name='eingabe' value={eingabe} onChange={change} />\n        <InputGroup.Append>\n          <Button onClick={abschicken}>Say</Button> \n          <Button onClick={setzen}>Set</Button>\n          <Button onClick={laden}>Get</Button>\n          <Button onClick={loeschen}>Del</Button>\n        </InputGroup.Append>\n      </InputGroup>\n      { ausgabe ? <Alert variant=\"danger\">{ausgabe}</Alert> : null }\n    </div>\n      // 55 => means if AUSGABE was TRUE then you get alerted!!! If not, then you'll \n      // get NULL(actually false)\n  );\n}\nexport default App;\n//export App to index!!!","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('todo')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}